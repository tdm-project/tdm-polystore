name: CI Pipeline

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
      - "**"
    tags:
      - "*.*.*"
  pull_request:
    branches:
      - master
      - develop

env:
  TERM: xterm
  # enable Docker push only if the required secrets are defined
  DOCKER_SECRETS_AVAILABLE: ${{ secrets.DOCKERHUB_USER != null && secrets.DOCKERHUB_TOKEN != null }}
  CRS4_HARBOR_SECRETS_AVAILABLE: ${{ secrets.CRS4_HARBOR_USER != null && secrets.CRS4_HARBOR_TOKEN != null }}
  CRS4_REGISTRY: harbor.crs4.it
  DO_PUSH: ${{ github.event_name == 'push' &&
               (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop') }}
jobs:
  # Verifies pep8, pyflakes and circular complexity
  flake8:
    name: Check Flake8 (python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Set up Python v${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install flake8
        run: pip install flake8
      - name: Run checks
        run: flake8 -v tdmq tests

  tests:
    name: Build, Test and Push Docker image
    runs-on: ubuntu-latest
    needs: [flake8]
    defaults:
      run:
        shell: bash
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: print github stuff
        run: |
          echo github.event_name=${{github.event_name}}
          echo github.ref=${{github.ref}}
          echo GITHUB_REF_NAME=${GITHUB_REF_NAME}
          echo ENV_GITHUB_EVENT_NAME=${GITHUB_EVENT_NAME}
      - name: Compute build number -- offset by old TravisCI build number
        env:
          BASE_BUILD_NUM: ${{ github.run_number }}
        run: |
          echo "BUILD_NUM=$(($BASE_BUILD_NUM+500))" >> $GITHUB_ENV
      - name: Compute tag and other metadata
        run: |
          echo "ImageTag=${GITHUB_REF_NAME}-${BUILD_NUM}" >> $GITHUB_ENV
          echo "ImageOwner=tdmproject" >> $GITHUB_ENV
          echo "Images=tdmq-db tdmq tdmqj tdmq-client-conda tdmq-client" >> $GITHUB_ENV
      - name: Docker Layer Caching
        uses: satackey/action-docker-layer-caching@v0.0.11
        # Ignore the failure of a step and avoid terminating the job.
        continue-on-error: true
      - name: Build Docker images
        run: |
          # According to docs, the Github runner should have 2 cores, so
          # that's our default number of parallel jobs
          # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners
          num_processors=$(nproc)
          make -j $((2 * ${num_processors:-2} )) images
      - name: Start testing services
        run: |
          make start
      - name: Run tests
        run: |
          make run-tests
      - name: Login to DockerHub
        uses: docker/login-action@v1
        if: env.DO_PUSH == 'true' && env.DOCKER_SECRETS_AVAILABLE == 'true'
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Tag and push images to Docker Hub
        if: env.DO_PUSH == 'true' && env.DOCKER_SECRETS_AVAILABLE == 'true'
        run: |
          set -o nounset; set -o errexit
          for image in ${Images}; do
            # ImageSlug used here must match the image tag set by the
            # docker build command in the Makefile
            ImageSlug="${ImageOwner}/${image}"

            echo "=== Tagging ${ImageSlug} as ${ImageTag} and pushing to DockerHub ==="
            docker tag "${ImageSlug}" "${ImageSlug}:${ImageTag}"
            docker push "${ImageSlug}:${ImageTag}"

            # push ':latest' tag only if we're on the master branch
            if [[ "${GITHUB_REF_NAME}" == master ]]; then
              echo "=== Tagging ${ImageSlug} as latest and pushing to DockerHub ==="
              docker tag "${ImageSlug}" "${ImageSlug}:latest"
              docker push "${ImageSlug}:latest"
            fi
          done
      - name: Login to CRS4 Harbor
        uses: docker/login-action@v1
        if: env.DO_PUSH == 'true' && env.CRS4_HARBOR_SECRETS_AVAILABLE == 'true'
        with:
          registry: ${{ env.CRS4_REGISTRY }}
          username: ${{ secrets.CRS4_HARBOR_USER }}
          password: ${{ secrets.CRS4_HARBOR_TOKEN }}
      - name: Tag and push images to CRS4
        if: env.DO_PUSH == 'true' && env.CRS4_HARBOR_SECRETS_AVAILABLE == 'true'
        run: |
          set -o nounset; set -o errexit
          push_error=false
          for image in ${Images}; do
            # ImageSlug used here must match the image tag set by the
            # docker build command in the Makefile
            ImageSlug="${ImageOwner}/${image}"
            FullImageSlug="${CRS4_REGISTRY}/${ImageSlug}"

            echo "=== Tagging ${ImageSlug} as ${FullImageSlug}:${ImageTag} and pushing ==="
            docker tag "${ImageSlug}" "${FullImageSlug}:${ImageTag}"
            # Don't let the build fail bacause pushing to CRS4 fails.
            # Take this out once the problems with the repository are fixed.
            docker push "${FullImageSlug}:${ImageTag}" || { echo "Failed to push image to CRS4"; push_error=true; }

            # push ':latest' tag only if we're on the master branch
            if [[ "${GITHUB_REF_NAME}" == master ]]; then
              echo "=== Tagging ${ImageSlug} as ${FullImageSlug}:latest and pushing ==="
              docker tag "${ImageSlug}" "${FullImageSlug}:latest"
              docker push "${FullImageSlug}:latest" || { echo "Failed to push image to CRS4";  push_error=true; }
            fi
          done
          if [[ "${push_error}" == 'false' ]]; then
            echo "<<<<<< Successfully pushed all images to CRS4!! >>>>>>"
          else
            echo "Failed to push some images to CRS4 :-("
          fi
      - name: Clean up working environment
        run: make clean
