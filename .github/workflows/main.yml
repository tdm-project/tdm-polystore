name: CI Pipeline

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
      - "**"
    tags:
      - "*.*.*"
  pull_request:
    branches:
      - master
      - develop

env:
  TERM: xterm
  # enable Docker push only if the required secrets are defined
  DOCKER_SECRETS_AVAILABLE: ${{ secrets.DOCKERHUB_USER != null && secrets.DOCKERHUB_TOKEN != null }}

jobs:
  # Verifies pep8, pyflakes and circular complexity
  flake8:
    name: Check Flake8 (python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7]
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Set up Python v${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install flake8
        run: pip install flake8
      - name: Run checks
        run: flake8 -v tdmq tests

  tests:
    name: Build, Test and Push Docker image
    runs-on: ubuntu-latest
    needs: [flake8]
    defaults:
      run:
        shell: bash
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: "3.7"
      - name: Compute build number -- offset by old TravisCI build number
        env:
          BASE_BUILD_NUM: ${{ github.run_number }}
        run: |
          echo "BUILD_NUM=$(($BASE_BUILD_NUM+500))" >> $GITHUB_ENV
      - name: Compute tag and other metadata
        run: |
          echo "ImageTag=${GITHUB_REF_NAME}-${BUILD_NUM}" >> $GITHUB_ENV
          echo "ImageOwner=tdmproject" >> $GITHUB_ENV
          echo "Images=tdmq-client-conda tdmq-client tdmq tdmqj tdmq-db tdmqj-hub" >> $GITHUB_ENV
      - name: Build Docker images
        run: |
          make images
      - name: Start testing services
        run: |
          make start
      - name: Run tests
        run: |
          make run-tests
      # DockerHub Login
      - name: Login to DockerHub
        uses: docker/login-action@v1
        if: github.event_name != 'pull_request' && env.DOCKER_SECRETS_AVAILABLE == 'true'
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Tag and push images
        if: >
          env.GITHUB_EVENT_NAME != 'pull_request' &&
          (env.GITHUB_REF_NAME == 'master' || env.GITHUB_REF_NAME == 'develop') &&
          env.DOCKER_SECRETS_AVAILABLE == 'true'
        run: |
          set -o nounset; set -o errexit
          for image in ${Images}; do
            ImageSlug="${ImageOwner}/${image}"
            FullImageName="${ImageSlug}:${ImageTag}"

            # ImageSlug used here must match the image tag set by the
            # docker build command in the Makefile
            docker tag "${ImageSlug}" "${FullImageName}"
            docker tag "${FullImageName}" "${ImageSlug}:latest"

            docker push "${FullImageName}"
            docker push "${ImageSlug}:latest"
          done
      - name: Clean up working environment
        run: make clean
