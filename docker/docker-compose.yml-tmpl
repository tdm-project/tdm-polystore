version: "3"

services:

  prometheus:
    image: prom/prometheus:v2.18.1
    ports:
      - "9090:9090"
    volumes:
      - "LOCAL_PATH/docker/prometheus.yml:/etc/prometheus/prometheus.yml"

  timescaledb:
    image: tdmproject/tdmq-db
    ports:
      - "5432"
    environment:
      - POSTGRES_DB=tdmqtest
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=foobar
      - START_DB=true
      - POSTGRES_RUN_MIGRATIONS=true
    healthcheck:
      test: [ "CMD", "pg_isready", "--username=postgres" ]
      interval: "15s"
      retries: 5

  web:
    # Remember that this service is using its default configuration
    # to access the database, so the settings must match the environment
    # configuration set for timescaledb above.
    image: tdmproject/tdmq
    depends_on:
      - "timescaledb"
    ports:
      - "8000:8000"
    #DEV user: USER_UID:USER_GID
    env_file: &env_file
      - settings.conf
    environment:
      - "CREATE_DB=false"
      - "DEV=false"
    #DEV volumes:
    #DEV - "LOCAL_PATH/tdmq:/tdmq-dist/tdmq"

  namenode:
    image: crs4/namenode:3.2.0
    ports:
      - "8020:8020"
      - "9870:9870"
      - "9871:9871"

  datanode:
    image: crs4/datanode:3.2.0
    ports:
      - "9864:9864"
      - "9865:9865"
      - "9866:9866"
      - "9867:9867"
    environment:
      - NAMENODE_HOSTNAME=namenode

  # Another option for s3-compatible storage to use for testing
  #cloudserver:
  #  image: zenko/cloudserver
  #  ports:
  #    - "8000:8000"
  #  environment:
  #    - "S3BACKEND=mem"
  #    - "REMOTE_MANAGEMENT_DISABLE=1"
  #    - "SSL=false"
  #    - "SCALITY_ACCESS_KEY_ID=tdm-user"
  #    - "SCALITY_SECRET_ACCESS_KEY=tdm-user-s3"

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
    env_file: *env_file
    environment:
      - MINIO_BROWSER=off
      - MINIO_HTTP_TRACE=/dev/stderr
    entrypoint: [ "/bin/sh", "-c",
                  "mkdir -p /data/$${STORAGE_BUCKET} && exec /usr/bin/docker-entrypoint.sh minio server /data" ]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  tdmqj:
    image: tdmproject/tdmqj
    ports:
      - "8888:8888"
    volumes:
      - "LOCAL_PATH/notebooks:/home/jovyan/work"
    #DEV   - "LOCAL_PATH/tdmq:/tdmq-dist/tdmq"
    #user: USER_UID:USER_GID
    env_file: *env_file
    environment:
      - NB_UID=USER_UID
      - NB_GID=USER_GID
      - JUPYTER_ENABLE_LAB=yes
      #DEV - PYTHONPATH=/tdmq-dist/

  tdmqc:
    image: tdmproject/tdmqc
    depends_on:
      - "namenode"
      - "timescaledb"
    #DEV user: USER_UID:USER_GID
    #DEV volumes:
    #DEV - "LOCAL_PATH/examples:/tdmq-dist/examples"
    #DEV - "LOCAL_PATH/tests:/tdmq-dist/tests"
    #DEV - "LOCAL_PATH/tdmq:/tdmq-dist/tdmq"
    env_file: *env_file
    environment:
      - NAMENODE_HOSTNAME=namenode
      - TDMQ_AUTH_TOKEN=

# vim: filetype=yaml
